plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.github.node-gradle.node' version '7.0.1'
}

group = 'com.golem.lab'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

node {
	download = false

	// Set the work directory for unpacking node
	workDir = file("${layout.getBuildDirectory()}/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${layout.getBuildDirectory()}/npm")
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-dependencies:3.3.4'
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa:5.0.0-B03'
	implementation 'com.oracle.database.jdbc:ojdbc11:23.5.0.24.07'
//	implementation 'org.eclipse.persistence:eclipselink:4.0.4'
	implementation 'jakarta.persistence:jakarta.persistence-api:3.2.0'



	runtimeOnly 'org.postgresql:postgresql'
//	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
//	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}


tasks.register('appNpmInstall', NpmTask) {
	description = "Installs all dependencies from package.json"
	println (project.projectDir)
	workingDir = file("${project.projectDir}/src/main/webapp/my-app")
	args = ["install"]
}

tasks.register('appNpmBuild', NpmTask) {
	dependsOn('appNpmInstall')

	description = "Builds production version of the webapp"
	workingDir = file("${project.projectDir}/src/main/webapp/my-app")
	args = ["run", "build"]
}

tasks.register('copyWebApp', Copy) {
	dependsOn('jar', 'appNpmBuild')

	from 'src/main/webapp/my-app/build'
	into 'build/resources/main/static/.'
}

resolveMainClassName.dependsOn copyWebApp
